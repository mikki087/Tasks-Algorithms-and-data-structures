#include <iostream>
#include <vector>
using namespace std;

struct Heap {
    vector<int> buff;
    vector < pair<int, int>> swapped_elements;
    Heap() {
    }


    void sift_down(int parent)
    {
        int child_l = 2 * parent + 1;
        int child_r = 2 * parent + 2;

        int minn = parent;
        if (child_l < buff.size() && buff[child_l] < buff[minn])
        {
            minn = child_l;
        }
        if (child_r < buff.size() && buff[child_r] < buff[minn])
        {
            minn = child_r;
        }

        if (parent != minn)
        {
            swapped_elements.push_back(make_pair(parent, minn));
            swap(buff[parent], buff[minn]);
            sift_down(minn);
        }
    }
    
    void create_heap()
    {
        for (int i = buff.size() / 2 - 1; i >= 0;i--)
            sift_down(i);
        int count = swapped_elements.size();
        cout << count << "\n";
        for (int i = 0; i < count; ++i)
        {
            cout << swapped_elements[i].first << " " << swapped_elements[i].second << "\n";
        }
        
    }

    void push(int new_element)
    {
        buff.push_back(new_element);
    }
        
};

int main() {
    Heap heap;
    int m;
    cin >> m;
    for (int i = 0; i < m; ++i)
    {
        int value;
        cin >> value;
        heap.push(value);
    }

    heap.create_heap();
}
